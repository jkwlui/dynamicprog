1. Base cases:
""
""
Sum of squares of slack space: 0

"The"
"The"

Max line length: 3
Sum of squares of slack space: 0

Small cases:
"This little piggy went to market.
This little piggy stayed home.
This little piggy had roast beef.
This little piggy had none.
And this little piggy cried wee wee wee all the way home."

Max line length: 30
Sum of squares of slack space: 2^2+1^2+2^2+4^2+26^2 = 4+1+4+16+676 = 701

"This little piggy went to market.
This little piggy stayed home.
This little piggy had roast beef.
This little piggy had none. And
this little piggy cried wee wee
wee all the way home."

Max line length: 30
Sum of squares of slack space: 2^2+1^2+2^2+0^2+1^2+10^2 =  4+1+4+0+1+100 = 110

Substantial case:
"Call me Ishmael.
Some years ago,
never mind how long precisely,
having little or no money in my purse,
and nothing particular to interest me on shore,
I thought I would sail about a little
and see the watery part of the world."

Max line length: 30
Sum of squares of slack space: 15^2+14^2+1^2+7^2+16^2+7^2+6^2 = 225+196+1+49+256+49+36 = 812

"Call me Ishmael. Some years ago, never
mind how long precisely, having little
or no money in my purse, and nothing
particular to interest me on shore, I
thought I would sail about a little
and see the watery part of the world."

Sum of squares of slack space: 7^2+7^2+6^2+6^2+5^2+6^2 = 49+49+36+36+25+36 = 231

CONSTRAINTS: If there is one word in the text, and the word
is longer than the maximum length allowed, than it would have
to be rejected.

2. Mathematical recurrence for cost of sum of
squared slacks in optimal solution:

Define OPT(k) to be the optimum solution (minimize slack spaces for all lines) for
lines containing words w(1) up to w(k).

Define S(i,k) to be the slack space(s) of a line that contains the words w(i) up to w(k).
Define S(i,k) := infinity if such line exceeds the maximum number of words allowed for a line.

Then OPT(k) = min_(i<=i<=k) [(S^2(i,k)) + OPT(k-1)]
Define OPT(0) = 0    // optimal solution for the set of 0 words is 0. (no slack space for no words)

That is, find the minimum squared cost (slack space) by iteratively fitting more words into
a line and finding the optimal solution of the remaining words.

Therefore, the optimal solution of w(1)..w(n) is computed by finding OPT(n) - building up
from OPT(0), OPT(1), .. , OPT(n)



3. Memoized version runtime: Θ(n^2); memory use: Θ(n)

By storing OPT(0), OPT(1), .. , OPT(n), we just need to computer each OPT(k) once,
so there are n iterations of computing the optimum sub-solutions.

Each OPT(k) will need to compute S^2(i,k) from i=0 to k, assuming it takes O(1) time
to compute each, it would take Θ(n) time. Finding the minimum of these values are
just O(n) time (could do better - using BST, but previous computation dominates), thus
the total time would be Θ(n^2) time.

We will need to store OPT(0), .. , OPT(n), so the memory use is Θ(n).

4. Java

5. public class Naive {

	public static int minSlackSpace(String[] words, int maxCharInLine) {
		// base case: if words is empty, slack space = 0
		int numWords = words.length;
		if (numWords == 0)
			return 0;
		// initialize min to 1 larger than number of characters for all words
		int min = 100000000;
		int j = numWords;
		while (true) {
			j--;
			if (j < 0)
				break;
			// partition words list into words to be considered in this line
			String[] wordsInLine = (String[]) Arrays.copyOfRange(words, j, numWords);
			// get num. of characters for this line
			int charsInLine = Utilities.charsInLine(wordsInLine);
			// partition words list into words to be considered in next line
			String[] remainingWords = (String[]) Arrays.copyOfRange(words, 0, j);

			// if current line characters exceeds the maximum allowed for a line
			// break out of loop and produce the minimum value
			if (charsInLine > maxCharInLine)
				break;

			// recursively find the total slack space given that current line
			// consists of words used in this line
			int slackSpace = (int) (Math.pow(maxCharInLine - charsInLine, 2) + minSlackSpace(remainingWords, maxCharInLine));
			// update the minimum slack space if slack space from this line
			// is smaller than the minimum
			if (slackSpace < min) {
				min = slackSpace;
			}
		}

		return min;
	}

}

6. public static int minSlackSpaceMemoized(String[] words, int maxCharInLine) {
		// initialize array of optimal solution to the size of words
		// use Integer object instead of primitive int because
		// it allows for "null" values

		// initialize array indices 0..n where n is the number of words
		optimalSlackSpace = new Integer[words.length + 1];
		// base case: optimal slack space of 0 words = 0
		optimalSlackSpace[0] = 0;

		// populate optimalSlackSpace from i = 1..n
		for (int i = 1; i <= words.length; i++) {
			// initialize min slack space to maximum value of Integer (infty)
			int min = Integer.MAX_VALUE;
			// add 1 word to word on this line and find slack spaces:
			for (int j = i - 1; j >= 0; j--) {
				String[] wordsInLine = Arrays.copyOfRange(words, j, i);

				int charsInLine = Utilities.charsInLine(wordsInLine);

				if (charsInLine > maxCharInLine)
					break;

				int slackSpace = (int) (Math.pow(maxCharInLine - charsInLine, 2))
						+ optimalSlackSpace[j];

				if (slackSpace < min)
					min = slackSpace;

			}

			optimalSlackSpace[i] = min;
		}


		return optimalSlackSpace[words.length];
	}
}

7. public class DynamicProgramming {

	// For array index i, it holds the optimal solution as computed
		// up to i words. Base case: optimalSlackSpace[0] = 0 where
		// 0 words are included

		public static Integer[] optimalSlackSpace;

		public static int minSlackSpaceDP(String[] words, int maxCharInLine) {
			// initialize array of optimal solution to the size of words
			// use Integer object instead of primitive int because
			// it allows for "null" values

			// initialize array indices 0..n where n is the number of words
			optimalSlackSpace = new Integer[words.length + 1];
			// base case: optimal slack space of 0 words = 0
			optimalSlackSpace[0] = 0;

			// populate optimalSlackSpace from i = 1..n
			for (int i = 1; i <= words.length; i++) {
				// initialize min slack space to maximum value of Integer (infty)
				int min = Integer.MAX_VALUE;
				// add 1 word to word on this line and find slack spaces:
				for (int j = i - 1; j >= 0; j--) {
					String[] wordsInLine = Arrays.copyOfRange(words, j, i);

					int charsInLine = Utilities.charsInLine(wordsInLine);

					if (charsInLine > maxCharInLine)
						break;

					int slackSpace = (int) (Math.pow(maxCharInLine - charsInLine, 2))
							+ optimalSlackSpace[j];

					if (slackSpace < min)
						min = slackSpace;

				}

				optimalSlackSpace[i] = min;
			}


			return optimalSlackSpace[words.length];
		}
	}

8. class DynamicProgramming {

	// For array index i, it holds the optimal solution as computed
		// up to i words. Base case: optimalSlackSpace[0] = 0 where
		// 0 words are included

		public static Integer[][] optimalSlackSpace;

		public static Integer[][] minSlackSpaceDP(String[] words, int maxCharInLine) {
			// initialize array of optimal solution to the size of words
			// use Integer object instead of primitive int because
			// it allows for "null" values

			// initialize array indices [] [] with number of words
			optimalSlackSpace = new Integer[words.length][words.length];
			for (int i = 0; i < words.length; i++) {
				for (int j = 0; j < words.length; j ++) {
					optimalSlackSpace[i][j] = -1; //will equal infinity
				}
			}
			// base case
			optimalSlackSpace[0][0] = words[0].length();

			int[] lastWord = new int[words.length];
			lastWord[0] = words.length - 1;

			//first row of table
			for (int i = 1; i < words.length; i++) {
				optimalSlackSpace[0][i] = optimalSlackSpace[0][i-1] + words[i].length();
			}

			//remaining rows
			for (int i = 1; i < words.length; i++) {
				int k = i;
				optimalSlackSpace[i][k] = optimalSlackSpace[1][k] - optimalSlackSpace[1][i-1];
				//while you can add more words to a line
				while (k <= words.length - 2 &&
						(maxCharInLine - optimalSlackSpace[i][k] - (k - i)) > 0) {
					k++;
					optimalSlackSpace[i][k] = optimalSlackSpace[0][k] - optimalSlackSpace[0][i-1];
				}
				lastWord[i] = k;
			}

			//Finding the sum of squares for valid entries in table
			for (int i = 0; i < words.length; i++) {
				for (int j = i; j <= lastWord[i]; j++) {
					optimalSlackSpace[i][j] = maxCharInLine - optimalSlackSpace[i][j] - (j-i);
					if (optimalSlackSpace[i][j] < 0) {
						optimalSlackSpace[i][j] = 1000000; //Infinity
					} else {
						optimalSlackSpace[i][j] = optimalSlackSpace[i][j] * optimalSlackSpace[i][j];
					}
				}
			}

			//entries still at 0 are invalid, make them infinity
			for (int i = 0; i < words.length; i++) {
				for (int j = 0; j < words.length; j++) {
					if (optimalSlackSpace[i][j] < 0) {
						optimalSlackSpace[i][j] = 1000000;
					}
				}
			}

			return optimalSlackSpace;
		}
	}



9. public static void getRandomTextFromFile(String[] dictionary, int numWords) {

		// generate i = numWords random numbers from 0 to sizeOf(dictionary)
		Random generator = new Random();

		ArrayList<Integer> randomIndices = new ArrayList<Integer>();

		for (int i = 0; i < numWords; i++) {
			randomIndices.add(generator.nextInt(dictionary.length));
		}

		List<String> randomWords = new ArrayList<String>();

		for (int index : randomIndices) {
			randomWords.add(dictionary[index]);
		}

		String[] wordsArray = randomWords.toArray(new String[randomWords.size()]);

		Integer[][] slackTable = DynamicProgramming.minSlackSpaceDP(wordsArray, 40);

		SolutionExtractor.printPretty(wordsArray, slackTable);

	}
